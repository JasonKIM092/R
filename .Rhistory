# 연습문제 2 : 세명의 입사일이 다음과 같을때 세명의 입사일로 부터
# 100일 뒤의 날짜를 동시에 출력하여라.
# 2010년 12월 12일, 2000년 6월 20일, 2011년 02월 04일
a1 <- c(as.Date('2010/12/12'), as.Date('2000/06/20'), as.Date('2011/02/04'))
a1+100
a2 <- c('2010/12/12', '2000/06/20', '2011/02/04')
as.Date(a2,'%Y/%m/%d')+100
strptime(a2,'%Y/%m/%d') + 100 # 100 = 100초.시간으로 계산됨.. 그냥 파싱용도만.
# 시스템 날짜 언어 변경 : 해당 세션에서만 유효하다.
Sys.setlocale('LC_TIME','C')      # 영문
date()
Sys.setlocale('LC_TIME','KOREAN') # 한글
date()
date1 <- now() # 현재 날짜시간
library(lubridate)
date1 <- now() # 현재 날짜시간
year(date1)
month(date1)            # 월(숫자).영문설정으로 출력해도 숫자로 출력된다.
month(date1, label = T) # factor형 변수로 출력
# 시스템 날짜 언어 변경 : 해당 세션에서만 유효하다.
Sys.setlocale('LC_TIME','C')      # 영문
Sys.setlocale('LC_TIME','KOREAN') # 한글
date()
day(date1)
wday(date1)            # 요일(숫자)
wday(date1, label = T) # 요일(이름)
hour(date1)
minute(date1)
second(date1)
# 시스템 날짜 언어 변경 : 해당 세션에서만 유효하다.
Sys.setlocale('LC_TIME','C')      # 영문
wday(date1, label = T) # 요일(이름)
hour(date1)
minute(date1)
second(date1)
# libridate 패키지를 사용한 날짜의 연산
date2 <- Sys.Date()
date2 + 31
date2 + months(1)
date2 + 31*3      # 3개월 후 날짜의 연산의 정확도가 떨어짐
date2 + months(3) # 정확한 계산 가능
# 연습문제
# 2019년 9월의 일별 데이터를 출력,
# 그 중 v_year라는 컬럼(변수)에 년도만,
# v_month라는 컬럼(변수)에 월만, v_day라는 컬럼(변수)에 일만 분리저장
# v_bonus_date 컬럼에 6개월 후 데이터를 입력
v1 <-seq(as.Date('2019/09/01'),as.Date('2019/09/30'),1)
as.character(v1,'%Y') # 문자로 리턴
year(v1)              # 숫자로 리턴
v_year <- year(v1)
# 연습문제
# 2019년 9월의 일별 데이터를 출력,
# 그 중 v_year라는 컬럼(변수)에 년도만,
# v_month라는 컬럼(변수)에 월만, v_day라는 컬럼(변수)에 일만 분리저장
# v_bonus_date 컬럼에 6개월 후 데이터를 입력
v1 <-seq(as.Date('2019/09/01'),as.Date('2019/09/30'),1)
as.character(v1,'%Y') # 문자로 리턴
year(v1)              # 숫자로 리턴
Sys.setlocale('LC_TIME','KOREAN') # 한글
# 연습문제
# 2019년 9월의 일별 데이터를 출력,
# 그 중 v_year라는 컬럼(변수)에 년도만,
# v_month라는 컬럼(변수)에 월만, v_day라는 컬럼(변수)에 일만 분리저장
# v_bonus_date 컬럼에 6개월 후 데이터를 입력
v1 <-seq(as.Date('2019/09/01'),as.Date('2019/09/30'),1)
as.character(v1,'%Y') # 문자로 리턴
year(v1)              # 숫자로 리턴
v_year <- year(v1)
v_month <- month(v1)
v_day <- day(v1)
v_bonus_date <- v1 + months(6)
v_bonus_date
# 1. 벡터의 생성 및 수정
v1 <- c(1,2,3,4,5)
v2 <- c(10,20,30,40,50)
v1 <- c(v1,6)  # 벡터의 원소 추가(맨 끝). 덮어쓰는 작업까지 해야지만 원소가 완벽하게 추가 되는 것이다.
# 중간에 삽입 불가. 맨끝에만 가능.
v2 <- append(v2,60)  # 벡터의 원소 추가(맨 끝). 중간에 삽입 불가, 맨 끝에만 가능.
v10 <- c() # 비어있는 벡터의 생성.
# 벡터의 산술연산
v1 + 100  # 스칼라 산술 연산 가능
v1 + v2   # 동일 크기의 벡터끼리 산술 연산 가능
v3 <- c(100,200,300)
v1 + v3 # 101 202 303 104 205 306
v4 <- c(100,200,300,400)
v1 + v4 # 101 202 303 404 105 206
# 벡터의 원소 추출 : 색인은 오라클에서 where절 조건과 비슷한 개념.
# 1. 정수색인 : 위치값 기준 색인 및 추출
v1[3]
v1[-3]  # 3번째 값을 제외하고. -를 통한 특정값 제외.
# 2. 이름색인 : 이름으로 추출
names(v1) # 원소이름 확인 함수
names(v1) <- c('a','b','c','d','e','f')  # 원소이름 부여/변경. 이름이 있는 벡터로 변경됨.
v1
v1['c']
v1[-'c'] # 이름색인일 경우 -를 통한 제외 불가!
# 3. 벡터색인
v1[1,3]                 # 2차원 데이터일때 첫번째 행, 세번째 컬럼 선택. 2차원 데이터 셋. 해석 : 1행의 3컬럼의 데이터 선택.
# 1. 벡터의 생성 및 수정
v1 <- c(1,2,3,4,5)
v2 <- c(10,20,30,40,50)
v1 <- c(v1,6)  # 벡터의 원소 추가(맨 끝). 덮어쓰는 작업까지 해야지만 원소가 완벽하게 추가 되는 것이다.
# 3. 벡터색인
v1[1,3]                 # 2차원 데이터일때 첫번째 행, 세번째 컬럼 선택. 2차원 데이터 셋. 해석 : 1행의 3컬럼의 데이터 선택.
v1[1,3,6]               # 3차원 데이터 셋.
v1[c(1,3,6)]            # 벡터로 묶기. 1,3,6번째 데이터를 추출하는 쿼리.
v1[-c(1,3,6)]           # 숫자벡터에도 -를 통한 제외 가능
v1[c(1,2,3)] = v1[1:3]  # 연속적 범위 추출은 슬라이스 객체(v1[1:3], 시퀀스 배열) 사용
v1[c(1,2,3)] =
v1[1:3]  # 연속적 범위 추출은 슬라이스 객체(v1[1:3], 시퀀스 배열) 사용
v1[c(1,2,3)]
v1[1:3]  # 연속적 범위 추출은 슬라이스 객체(v1[1:3], 시퀀스 배열) 사용
v1[-1:3]                # -1이라는 위치값으로 해석됨. 슬라이스 객체(시퀀스)에는 적용 불가능. -1부터 3까지로 해석됨(에러)
v1[-c(1:3)]             # 이렇게 사용해야 적용됨. 슬라이스 객체를 벡터로 만들어 -전달 가능
# 4. 불리언색인(조건색인)
v1[c(T,F,F,F,F,F)] # 해석 : 첫번째 원소만 추출하라. 즉, TRUE에 매칭되는 원소만 추출하라.
v1[c(F,T,F,F,F,F)]
v1 < 3 # 조건의 기능은 있지만, 추출의 기능은 없다. 오라클에서 where절은 조건+추출의 기능이 있다.
v1[v1 < 3]  # where v1 < 3
c(1,2,3,c(1,2,3))
c(1,2,3,1,2,3)
c(1,2,3)
c(1,2,3)
# 포함연산자 : %in%
v2 <- c('a','b','c','d','e')
v2 %in% c('a','c')  # (v2=='a') | (v2=='c')와 동일
# where v2 in ('a','c')
v2 %in% 'a'         # v2벡터의 각 원소에 'a'의 포함 여부 리턴
'a' %in% v2         # v2벡터 전체 중 'a'가 포함됐는지 여부 리턴
# 벡터의 집합연산자
v1 <- c('a','b','c','d')
v2 <- c('b','d','e')
v3 <- c('b','d','d','e')
v4 <- c('b','d','e')
# 1. union : 합집합(중복제거)
union(v1,v2) #"a" "b" "c" "d" "e"
#1) 합집합
c(vec1,vec2) # c(union(vec1,vec2), intersect(vec1,vec2))
#3.
vec1 <- c('봄','여름','가을','겨울')
vec2 <- c('봄','여름','늦여름','초가을')
#1) 합집합
c(vec1,vec2) # c(union(vec1,vec2), intersect(vec1,vec2))
union(vec1,vec2)
#2) 차집합
vec1[!vec1 %in% vec2]
setdiff(vec1,vec2)
#3) 교집합
vec1[vec1 %in% vec2]
intersect(vec1,vec2)
# 벡터의 집합연산자
v1 <- c('a','b','c','d')
v2 <- c('b','d','e')
v3 <- c('b','d','d','e')
v4 <- c('b','d','e')
# 1. union : 합집합(중복제거)
union(v1,v2) #"a" "b" "c" "d" "e"
# 2. intersect : 교집합
intersect(v1,v2) #"b" "d
# 3. setdiff : 차집합
setdiff(v1,v2) #"a" "c"
# 4. identical : 두 벡터가 완전히 동일한지 여부 체크(크기, 내용일치)
identical(v2,v4) #TRUE
identical(v3,v4) #FALSE
# 5. setequal : 두 벡터의 구성요소가 동일한지 여부 체크(크기 상관 x)
setequal(v3,v4) #TRUE
seq(3,7,-1)
seq(7,3,-1)
seq(7,3,1)
seq(7,3,-1)
x <- matrix(1:9, ncol=3)
x <- matrix(1:9, ncol=3) ; x
colnames(x)
rownames(x)
R_PAY = emp$SAL * trunc(date1 - emp$HIREDATE)/12
R_PAY = emp$SAL * trunc((date1 - emp$HIREDATE)/12)
R_PAY = emp$SAL * trunc((now() - emp$HIREDATE)/12)
R_PAY = emp$SAL * trunc((now() - emp$HIREDATE)/12)
R_PAY = emp$SAL * trunc(now() - emp$HIREDATE)/12
R_PAY = emp$SAL * (trunc(now() - emp$HIREDATE)/12)
# 2) 다음의 계산식으로 퇴직금 계산 후 R_PAY 컬럼으로 추가
# (퇴직금 = 현재 SAL * trunc(근속년수/12))
date1 <- now()
R_PAY = emp$SAL * trunc(date1 - emp$HIREDATE)/12
R_PAY = emp$SAL * trunc((date1 - emp$HIREDATE)/12)
R_PAY = emp$SAL * trunc(date1 - emp$HIREDATE)/12
# 3. oracle의 translate함수 구현
# (단, 두번째와 세번째 인자의 길이 같을 경우만 고려)
emp
# 2. emp.csv 파일을 읽고
emp <- read.csv('emp.csv', stringsAsFactors = F)
df1 <- data.frame(col1 = 1:5, col2 = 6:10)
df1
write.csv(df1, 'df1.csv')
write.csv(df1, 'df1.csv')  # working directory에 저정이 된다.
getwd()
